#include <stdio.h>
#include <math.h>

#define EPSILON 0.0001
#define MAX_ITERATIONS 1000
#define f(x) ((x) * (x) * (x) - 3 * (x) - 5)  // Given function
#define df(x) (3 * (x) * (x) - 3)            // Derivative of function

void find_root_newton(float initial_guess, int show_table);
int find_all_roots_newton(float a, float b, float step, int show_table);

int main() {
    float a, b, step = 0.1;
    char choice;
    int root_count;

    do {
        printf("Enter the range: ");
        scanf("%f %f", &a, &b);

        printf("Show iteration table? (y/n): ");
        scanf(" %c", &choice);
        int show_table = (choice == 'y' || choice == 'Y');

        root_count = find_all_roots_newton(a, b, step, show_table);

        if (root_count == 0)
            printf("\nNo roots found in the given range. Please enter a new range.\n");

    } while (root_count == 0);

    printf("\nTotal roots found: %d\n", root_count);
    return 0;
}

int find_all_roots_newton(float a, float b, float step, int show_table) {
    int count = 0;
    printf("\nSearching for roots in [%.2f, %.2f]:\n", a, b);

    for (float i = a; i < b; i += step) {
        if (f(i) * f(i + step) < 0) {
            float initial_guess = (i + i + step) / 2; // Midpoint as initial guess
            printf("\nRoot found near %.2f, using Newton-Raphson:\n", initial_guess);
            find_root_newton(initial_guess, show_table);
            count++;
        }
    }

    return count;
}

void find_root_newton(float x, int show_table) {
    int iteration = 0;
    float fx, dfx, x_new;

    if (show_table) {
        printf("\nIteration\t    x\t\t   f(x)\t\t  f'(x)\n");
        printf("----------------------------------------------------------\n");
    }

    do {
        fx = f(x);
        dfx = df(x);

        if (fabs(dfx) < EPSILON) { // Prevent division by zero
            printf("Warning: Derivative near zero. Stopping iteration.\n");
            return;
        }

        x_new = x - fx / dfx;

        if (show_table) {
            printf("%5d\t%12.6f\t%12.6f\t%12.6f\n", iteration, x, fx, dfx);
        }

        if (fabs(x_new - x) < EPSILON || fabs(fx) < EPSILON)
            break;

        x = x_new;
        iteration++;

    } while (iteration < MAX_ITERATIONS);

    if (iteration >= MAX_ITERATIONS)
        printf("Warning: Maximum iterations reached. May not have fully converged.\n");

    printf("Final Root: %.6f found after %d iterations\n", x, iteration);
}
